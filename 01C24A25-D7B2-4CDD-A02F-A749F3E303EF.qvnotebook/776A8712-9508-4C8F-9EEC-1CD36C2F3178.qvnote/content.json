{
  "title": "Subset of standard git commands",
  "cells": [
    {
      "type": "text",
      "data": "<p>A standalone individual developer does not exchange patches with other people, and works alone in a<br>single repository, using the following commands.</p>\n"
    },
    {
      "type": "markdown",
      "data": "\n  o   git-init(1) to create a new repository.\n\n   o   git-log(1) to see what happened.\n\n   o   git-checkout(1) and git-branch(1) to switch branches.\n\n   o   git-add(1) to manage the index file.\n\n   o   git-diff(1) and git-status(1) to see what you are in the middle of doing.\n\n   o   git-commit(1) to advance the current branch.\n\n   o   git-reset(1) and git-checkout(1) (with pathname parameters) to undo changes.\n\n   o   git-merge(1) to merge between local branches.\n\n   o   git-rebase(1) to maintain topic branches."
    },
    {
      "type": "text",
      "data": "<p>Examples<br>Use a tarball as a starting point for a new repository.</p>\n"
    },
    {
      "type": "markdown",
      "data": "\n           $ tar zxf frotz.tar.gz\n           $ cd frotz\n           $ git init\n           $ git add . (1)\n           $ git commit -m \"import of frotz source tree.\"\n           $ git tag v2.43 (2)\n"
    },
    {
      "type": "text",
      "data": "<pre><code> 1. add everything under the current directory.\n 2. make a lightweight, unannotated tag.\n</code></pre>"
    },
    {
      "type": "text",
      "data": "<p>Create a topic branch and develop.</p>\n"
    },
    {
      "type": "markdown",
      "data": "           $ git checkout -b alsa-audio (1)\n           $ edit/compile/test\n           $ git checkout -- curses/ux_audio_oss.c (2)\n           $ git add curses/ux_audio_alsa.c (3)\n           $ edit/compile/test\n           $ git diff HEAD (4)\n           $ git commit -a -s (5)\n           $ edit/compile/\n\t\t\t\t\t\t       $ git diff HEAD^ (6)\n           $ git commit -a --amend (7)\n           $ git checkout master (8)\n           $ git merge alsa-audio (9)\n           $ git log --since='3 days ago' (10)\n           $ git log v2.43.. curses/ (11)\n"
    },
    {
      "type": "text",
      "data": "<pre><code>   1. create a new topic branch.\n   2. revert your botched changes in curses/ux_audio_oss.c.\n   3. you need to tell Git if you added a new file; removal and modification will be caught if you\n   do git commit -a later.\n   4. to see what changes you are committing.\n   5. commit everything, as you have tested, with your sign-off.\n   6. look at all your changes including the previous commit.\n   7. amend the previous commit, adding all your new changes, using your original message.\n   8. switch to the master branch.\n   9. merge a topic branch into your master branch.\n   10. review commit logs; other forms to limit output can be combined and include -10 (to show up\n   to 10 commits), --until=2005-12-10, etc.\n   11. view only the changes that touch what&#39;s in curses/ directory, since v2.43 tag.\n</code></pre><p>INDIVIDUAL DEVELOPER (PARTICIPANT)<br>A developer working as a participant in a group project needs to learn how to communicate with<br>others, and uses these commands in addition to the ones needed by a standalone developer.</p>\n"
    },
    {
      "type": "markdown",
      "data": "\n   o   git-clone(1) from the upstream to prime your local repository.\n\n   o   git-pull(1) and git-fetch(1) from \"origin\" to keep up-to-date with the upstream.\n\n   o   git-push(1) to shared repository, if you adopt CVS style shared repository workflow.\n\n   o   git-format-patch(1) to prepare e-mail submission, if you adopt Linux kernel-style public forum\n       workflow.\n\n   o   git-send-email(1) to send your e-mail submission without corruption by your MUA.\n\n   o   git-request-pull(1) to create a summary of changes for your upstream to pull.\n"
    },
    {
      "type": "text",
      "data": "<p>Examples<br>Clone the upstream and work on it. Feed changes to upstream.</p>\n"
    },
    {
      "type": "markdown",
      "data": "\n           $ git clone git://git.kernel.org/pub/scm/.../torvalds/linux-2.6 my2.6\n           $ cd my2.\n\t\t\t\t\t\t $ git checkout -b mine master (1)\n           $ edit/compile/test; git commit -a -s (2)\n           $ git format-patch master (3)\n           $ git send-email --to=\"person <email@example.com>\" 00*.patch (4)\n           $ git checkout master (5)\n           $ git pull (6)\n           $ git log -p ORIG_HEAD.. arch/i386 include/asm-i386 (7)\n           $ git ls-remote --heads http://git.kernel.org/.../jgarzik/libata-dev.git (8)\n           $ git pull git://git.kernel.org/pub/.../jgarzik/libata-dev.git ALL (9)\n           $ git reset --hard ORIG_HEAD (10)\n           $ git gc (11)\n"
    },
    {
      "type": "text",
      "data": "<pre><code>   1. checkout a new branch mine from master.\n   2. repeat as needed.\n   3. extract patches from your branch, relative to master,\n   4. and email them.\n   5. return to master, ready to see what&#39;s new\n   6. git pull fetches from origin by default and merges into the current branch.\n   7. immediately after pulling, look at the changes done upstream since last time we checked,\n   only in the area we are interested in.\n   8. check the branch names in an external repository (if not known).\n   9. fetch from a specific branch ALL from a specific repository and merge it.\n   10. revert the pull.\n   11. garbage collect leftover objects from reverted pull.\n</code></pre><p>   Push into another repository.</p>\n"
    },
    {
      "type": "markdown",
      "data": "\n           satellite$ git clone mothership:frotz frotz (1)\n           satellite$ cd frotz\n           satellite$ git config --get-regexp '^(remote|branch)\\.' (2)\n           remote.origin.url mothership:frotz\n           remote.origin.fetch refs/heads/*:refs/remotes/origin/*\n           branch.master.remote origin\n           branch.master.merge refs/heads/master\n           satellite$ git config remote.origin.push \\\n                      +refs/heads/*:refs/remotes/satellite/* (3)\n           satellite$ edit/compile/test/commit\n           satellite$ git push origin (4)\n\n           mothership$ cd frotz\n           mothership$ git checkout master\n           mothership$ git merge satellite/master (5)\n"
    },
    {
      "type": "text",
      "data": "<pre><ol><li><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">Mothership machine has a frotz repository under your home directory; clone from it to star </span><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">a repository on the satellite machine.</span></li><li><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">Clone sets these configuration variables by default. It arranges git pull to fetch and store </span><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">the branches ofmothership machine to local remotes/origin/* remote-tracking branches.</span></li><li><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">Arrange git push to push all local branches to their corresponding branch of the mothership </span><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">machine.</span></li><li><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">Push will stash all our work away on remotes/satellite/* remote-tracking branches on the</span><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\"> mothership machine.You could use this as a back-up method. Likewise, you can pretend that </span><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">mothership \"fetched\" from you (useful when access is one sided).</span></li><li><span style=\"font-family: Menlo, Consolas, 'Ubuntu Mono', Monaco, source-code-pro, monospace;\">on mothership machine, merge the work done on the satellite machine into the master branch.</span><br></li><li><span style=\"font-family: Arial, Helvetica, sans-serif;\">Branch off of a specific tag.</span><br></li></ol></pre>\n"
    },
    {
      "type": "markdown",
      "data": "\n           $ git checkout -b private2.6.14 v2.6.14 (1)\n           $ edit/compile/test; git commit -a\n           $ git checkout master\n           $ git cherry-pick v2.6.14..private2.6.14 (2)\n"
    },
    {
      "type": "text",
      "data": "<pre><code>   1. create a private branch based on a well known (but somewhat behind) tag.\n   2. forward port all changes in private2.6.14 branch to master branch without a formal\n   &quot;merging&quot;. Or longhand git format-patch -k -m --stdout v2.6.14..private2.6.14 | git am -3 -k\n</code></pre><p>   An alternate participant submission mechanism is using the git request-pull or pull-request<br>   mechanisms (e.g as used on GitHub (www.github.com) to notify your upstream of your contribution.</p>\n"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}