{
  "title": "Logic for Calculator program in Obj-C",
  "cells": [
    {
      "type": "code",
      "language": "objectivec",
      "data": "Simple code: Calculator\n//---CalculatorViewController.h---\n\n#import <UIKit/UIKit.h>\n\n@interface CalculatorViewController : UIViewController\n\n@property (weak, nonatomic) IBOutlet UILabel *display;\n\n@end\n\n\n\n\n\n\n//---CalculatorViewController.m---\n\n#import \"CalculatorViewController.h\"\n#import \"CalculatorBrain.h\"\n\n\n@interface CalculatorViewController ()\n@property (nonatomic) BOOL userIsInTheMiddleOfEnteringANumber;\n@property (nonatomic, strong) CalculatorBrain *brain;\n@end\n\n@implementation CalculatorViewController\n\n// @synthesize display = _display;\n// @synthesize userIsInTheMiddleOfEnteringANumber = _userIsInTheMiddleOfEnteringANumber;\n// @synthesize brain = _brain;\n\n-(CalculatorBrain *) brain\n{\n    if (!_brain) _brain = [[CalculatorBrain alloc]init];\n    return _brain;\n}\n\n\n\n\n- (IBAction)digitPressed:(UIButton *)sender // id pointer to any kind of objects\n{\n    NSString *digit = [sender currentTitle];\n    // NSLog(@\"digit pressed = %@\", digit);\n    if (self.userIsInTheMiddleOfEnteringANumber) {\n    self.display.Text = [self.display.text stringByAppendingString:digit];\n    } else{\n        self.display.text = digit;\n        self.userIsInTheMiddleOfEnteringANumber = YES;\n    }\n}\n\n- (IBAction)enterPressed\n{\n    [self.brain pushOperand:[self.display.text doubleValue]];\n    self.userIsInTheMiddleOfEnteringANumber = NO;\n}\n\n\n\n\n- (IBAction)operationPressed:(UIButton *)sender\n{\n    \n    if (self.userIsInTheMiddleOfEnteringANumber) [self enterPressed];\n    double result = [self.brain performOperation:sender.currentTitle];\n    NSString *resultString = [NSString stringWithFormat:@\"%g\", result];\n    self.display.text = resultString;\n}\n\n\n@end\n\n\n\n\n\n\n//----CalculatorBrain.h----\n#import <Foundation/Foundation.h>\n\n@interface CalculatorBrain : NSObject\n\n-(void)pushOperand:(double)operand;\n-(double)performOperation:(NSString *)operation;\n\n@property (readonly) id program;\n\n+ (double)runProgram:(id)program;\n+ (NSString *)descriptionOfProgram:(id)program;\n\n\n@end\n\n\n\n\n\n\n//----CalculatorBrain.m----\n#import \"CalculatorBrain.h\"\n\n@interface CalculatorBrain()\n//@property (nonatomic, strong) NSMutableArray *operandStack;\n@property (nonatomic, strong) NSMutableArray *programStack;\n@end\n\n\n@implementation CalculatorBrain\n\n// @synthesize operandStack = _programStack;\n\n- (NSMutableArray *) programStack\n{\n    if (_programStack == nil) _programStack = [[NSMutableArray alloc]init];\n    return _programStack;\n}\n\n\n- (id)program\n{\n    return [self.programStack copy];\n}\n\n\n/*\n-(void)setOperandStack:(NSMutableArray *)operandStack\n{\n    _operandStack = operandStack;\n}\n*/\n\n-(void)pushOperand:(double)operand\n{\n    [self.programStack addObject:[NSNumber numberWithDouble: operand]];\n}\n\n-(double)performOperation:(NSString *)operation\n{\n    [self.programStack addObject:operation];\n    return [CalculatorBrain runProgram:self.program];\n}\n\n+ (double)runProgram:(id)program\n{\n    NSMutableArray *stack;\n    if ([program isKindOfClass:[NSArray class]])\n        stack = [program mutableCopy];\n    return [self popOperandOffStack:stack];\n}\n\n\n+ (double)popOperandOffStack:(NSMutableArray *)stack\n{\n    double result = 0;\n    id topOfStack = [stack lastObject];\n    if (topOfStack) [stack removeLastObject];\n    \n    if ([topOfStack isKindOfClass:[NSNumber class]])\n        result = [topOfStack doubleValue];\n    else if ([topOfStack isKindOfClass:[NSString class]]){\n        NSString *operation = topOfStack;\n        if ([operation isEqualToString:@\"+\"]){\n        result = [self popOperandOffStack:stack] + [self popOperandOffStack:stack];\n        } else if ([@\"*\" isEqualToString:operation]){\n            result = [self popOperandOffStack:stack] *[self popOperandOffStack:stack];\n        } else if ([@\"-\" isEqualToString:operation]){\n            double subtrahend = [self popOperandOffStack:stack];\n            result = [self popOperandOffStack:stack] - subtrahend;\n        } else if ([@\"/\" isEqualToString:operation]){\n            double divisor = [self popOperandOffStack:stack];\n            result = [self popOperandOffStack:stack] / divisor;\n        }\n\n    }\n    \n    return result;\n}\n\n\n    \n+ (NSString *)descriptionOfProgram:(id)program\n{\n    return @\"Expression of program\";\n}\n    \n\n\n/*\n- (double)popOperand\n{\n    NSNumber *operandObject = [self.programStack lastObject];\n    if (operandObject) [self.programStack removeLastObject];\n    return [operandObject doubleValue];\n}\n*/\n\n\n\n\n@end"
    }
  ]
}