{
  "title": "Javascript Implementation of regular expressions",
  "cells": [
    {
      "type": "text",
      "data": "<p style=\"font-family: Arial, helvetica, sans-serif; font-size: 14px; line-height: 20px; text-align: justify; margin: 10px; color: rgb(0, 0, 0); widows: 1; background-color: rgb(255, 255, 255);\">To test if a particular regex matches (part of) a string, you can call the strings's&nbsp;<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\"><b>match()</b></tt>&nbsp;method:<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\">if (myString.match(/regex/)) { /*Success!*/ }</tt>. If you want to verify user input, you should use&nbsp;<a href=\"http://www.regular-expressions.info/anchors.html\" target=\"_top\" style=\"color: rgb(0, 0, 128);\">anchors</a>&nbsp;to make sure that you are testing against the entire string. To test if the user entered a number, use:<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\">myString.match(/^\\d+$/)</tt>.&nbsp;<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\">/\\d+/</tt>&nbsp;matches any string containing one or more digits, but&nbsp;<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\">/^\\d+$/</tt>&nbsp;matches only strings consisting entirely of digits.</p><p style=\"font-family: Arial, helvetica, sans-serif; font-size: 14px; line-height: 20px; text-align: justify; margin: 10px; color: rgb(0, 0, 0); widows: 1; background-color: rgb(255, 255, 255);\">To do a search and replace with regexes, use the string's&nbsp;<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\"><b>replace()</b></tt>&nbsp;method:<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\">myString.replace(/replaceme/g, \"replacement\")</tt>. Using the&nbsp;<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\">/g</tt>&nbsp;modifier makes sure that all occurrences of \"replaceme\" are replaced. The second parameter is an normal string with the replacement text.</p><p style=\"font-family: Arial, helvetica, sans-serif; font-size: 14px; line-height: 20px; text-align: justify; margin: 10px; color: rgb(0, 0, 0); widows: 1; background-color: rgb(255, 255, 255);\">Using a string's&nbsp;<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\"><b>split()</b></tt>&nbsp;method allows you to split the string into an array of strings using a regular expression to determine the positions at which the string is splitted. E.g.&nbsp;<tt class=\"code\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap;\">myArray = myString.split(/,/)</tt>&nbsp;splits a comma-delimited list into an array. The comma's themselves are not included in the resulting array of strings.</p>"
    },
    {
      "type": "text",
      "data": "<h1 style=\"font-family: Arial, helvetica, sans-serif; font-size: 20px; color: rgb(192, 76, 0); margin: 30px 10px 10px; border-bottom-style: solid; border-bottom-color: rgb(192, 76, 0); border-bottom-width: 3px; padding-bottom: 3px; line-height: normal; widows: 1; background-color: rgb(255, 255, 255);\">Start of String and End of String Anchors</h1>"
    },
    {
      "type": "text",
      "data": "<p style=\"font-family: Arial, helvetica, sans-serif; font-size: 14px; line-height: 20px; text-align: justify; margin: 10px; color: rgb(0, 0, 0); widows: 1; background-color: rgb(255, 255, 255);\">Thus far, we have learned about&nbsp;<a href=\"http://www.regular-expressions.info/characters.html\" target=\"_top\" style=\"color: rgb(0, 0, 128);\">literal characters</a>,&nbsp;<a href=\"http://www.regular-expressions.info/charclass.html\" target=\"_top\" style=\"color: rgb(0, 0, 128);\">character classes</a>, and the&nbsp;<a href=\"http://www.regular-expressions.info/dot.html\" target=\"_top\" style=\"color: rgb(0, 0, 128);\">dot</a>. Putting one of these in a regex tells the regex engine to try to match a single character.</p><p style=\"font-family: Arial, helvetica, sans-serif; font-size: 14px; line-height: 20px; text-align: justify; margin: 10px; color: rgb(0, 0, 0); widows: 1; background-color: rgb(255, 255, 255);\">Anchors are a different breed. They do not match any character at all. Instead, they match a position before, after, or between characters. They can be used to \"anchor\" the regex match at a certain position. The caret&nbsp;<tt class=\"regex\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(255, 102, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(255, 244, 232);\">^</tt>&nbsp;matches the position before the first character in the string. Applying&nbsp;<tt class=\"regex\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(255, 102, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(255, 244, 232);\">^a</tt>&nbsp;to&nbsp;<tt class=\"string\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(0, 160, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(224, 255, 224);\">abc</tt>&nbsp;matches&nbsp;<tt class=\"match\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(0, 102, 255); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(232, 244, 255);\">a</tt>.&nbsp;<tt class=\"regex\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(255, 102, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(255, 244, 232);\">^b</tt>&nbsp;does not match&nbsp;<tt class=\"string\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(0, 160, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(224, 255, 224);\">abc</tt>&nbsp;at all, because the&nbsp;<tt class=\"regex\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(255, 102, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(255, 244, 232);\">b</tt>&nbsp;cannot be matched right after the start of the string, matched by&nbsp;<tt class=\"regex\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(255, 102, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(255, 244, 232);\">^</tt>. See below for the inside view of the regex engine.</p><p style=\"font-family: Arial, helvetica, sans-serif; font-size: 14px; line-height: 20px; text-align: justify; margin: 10px; color: rgb(0, 0, 0); widows: 1; background-color: rgb(255, 255, 255);\">Similarly,&nbsp;<tt class=\"regex\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(255, 102, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(255, 244, 232);\">$</tt>&nbsp;matches right after the last character in the string.&nbsp;<tt class=\"regex\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(255, 102, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(255, 244, 232);\">c$</tt>&nbsp;matches&nbsp;<tt class=\"match\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(0, 102, 255); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(232, 244, 255);\">c</tt>&nbsp;in&nbsp;<tt class=\"string\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(0, 160, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(224, 255, 224);\">abc</tt>, while&nbsp;<tt class=\"regex\" style=\"font-family: 'Andale Mono', 'Lucida Console', monospace; white-space: nowrap; border-top-style: solid; border-color: rgb(255, 102, 0); border-bottom-style: solid; border-width: 1px; padding-top: 1px; padding-bottom: 1px; background-color: rgb(255, 244, 232);\">a$</tt>&nbsp;does not match at all.</p><p style=\"font-family: Arial, helvetica, sans-serif; font-size: 14px; line-height: 20px; text-align: justify; margin: 10px; color: rgb(0, 0, 0); widows: 1; background-color: rgb(255, 255, 255);\">A regex that consists solely of an anchor can only find&nbsp;<a href=\"http://www.regular-expressions.info/zerolength.html\" target=\"_top\" style=\"color: rgb(0, 0, 128);\">zero-length matches</a>. This can be useful, but can also create&nbsp;<a href=\"http://www.regular-expressions.info/zerolength.html\" target=\"_top\" style=\"color: rgb(0, 0, 128);\">complications</a>&nbsp;that are explained near the end of this tutorial.</p>"
    }
  ]
}