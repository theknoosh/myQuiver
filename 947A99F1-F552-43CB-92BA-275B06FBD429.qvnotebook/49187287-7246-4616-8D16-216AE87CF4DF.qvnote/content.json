{
  "title": "Alternative way of creating button in spritekit",
  "cells": [
    {
      "type": "text",
      "data": "UIButtons don’t work in sprite kit. I have done it the way shown in a tutorial, but found it not particularly responsive, though it does work generally."
    },
    {
      "type": "text",
      "data": "This code I found online, but haven’t actually used it. I put it here for reference purposes. Will look at it at a later time.<div><br></div><div>Note: This code was written in swift 2.1, and would have to be rewritten in swift 3</div>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "class FTButtonNode: SKSpriteNode {\n\n    enum FTButtonActionType: Int {\n        case TouchUpInside = 1,\n        TouchDown, TouchUp\n    }\n\n    var isEnabled: Bool = true {\n        didSet {\n            if (disabledTexture != nil) {\n                texture = isEnabled ? defaultTexture : disabledTexture\n            }\n        }\n    }\n    var isSelected: Bool = false {\n        didSet {\n            texture = isSelected ? selectedTexture : defaultTexture\n        }\n    }\n\n    var defaultTexture: SKTexture\n    var selectedTexture: SKTexture\n    var label: SKLabelNode\n\n    required init(coder: NSCoder) {\n        fatalError(\"NSCoding not supported\")\n    }\n\n    init(normalTexture defaultTexture: SKTexture!, selectedTexture:SKTexture!, disabledTexture: SKTexture?) {\n\n        self.defaultTexture = defaultTexture\n        self.selectedTexture = selectedTexture\n        self.disabledTexture = disabledTexture\n        self.label = SKLabelNode(fontNamed: \"Helvetica\");\n\n        super.init(texture: defaultTexture, color: UIColor.whiteColor(), size: defaultTexture.size())\n        userInteractionEnabled = true\n\n        //Creating and adding a blank label, centered on the button\n        self.label.verticalAlignmentMode = SKLabelVerticalAlignmentMode.Center;\n        self.label.horizontalAlignmentMode = SKLabelHorizontalAlignmentMode.Center;\n        addChild(self.label)\n\n        // Adding this node as an empty layer. Without it the touch functions are not being called\n        // The reason for this is unknown when this was implemented...?\n        let bugFixLayerNode = SKSpriteNode(texture: nil, color: UIColor.clearColor(), size: defaultTexture.size())\n        bugFixLayerNode.position = self.position\n        addChild(bugFixLayerNode)\n\n    }\n\n    /**\n     * Taking a target object and adding an action that is triggered by a button event.\n     */\n    func setButtonAction(target: AnyObject, triggerEvent event:FTButtonActionType, action:Selector) {\n\n        switch (event) {\n        case .TouchUpInside:\n            targetTouchUpInside = target\n            actionTouchUpInside = action\n        case .TouchDown:\n            targetTouchDown = target\n            actionTouchDown = action\n        case .TouchUp:\n            targetTouchUp = target\n            actionTouchUp = action\n        }\n\n    }\n\n    /*\n    New function for setting text. Calling function multiple times does\n    not create a ton of new labels, just updates existing label.\n    You can set the title, font type and font size with this function\n    */\n\n    func setButtonLabel(title: NSString, font: String, fontSize: CGFloat) {\n        self.label.text = title as String\n        self.label.fontSize = fontSize\n        self.label.fontName = font\n    }\n\n    var disabledTexture: SKTexture?\n    var actionTouchUpInside: Selector?\n    var actionTouchUp: Selector?\n    var actionTouchDown: Selector?\n    weak var targetTouchUpInside: AnyObject?\n    weak var targetTouchUp: AnyObject?\n    weak var targetTouchDown: AnyObject?\n\n    override func touchesBegan(touches: Set<UITouch>, withEvent event: UIEvent?) {\n        if (!isEnabled) {\n            return\n        }\n        isSelected = true\n        if (targetTouchDown != nil && targetTouchDown!.respondsToSelector(actionTouchDown!)) {\n            UIApplication.sharedApplication().sendAction(actionTouchDown!, to: targetTouchDown, from: self, forEvent: nil)\n        }\n    }\n\n    override func touchesMoved(touches: Set<UITouch>, withEvent event: UIEvent?) {\n\n        if (!isEnabled) {\n            return\n        }\n\n        let touch: AnyObject! = touches.first\n        let touchLocation = touch.locationInNode(parent!)\n\n        if (CGRectContainsPoint(frame, touchLocation)) {\n            isSelected = true\n        } else {\n            isSelected = false\n        }\n\n    }\n\n    override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {\n        if (!isEnabled) {\n            return\n        }\n\n        isSelected = false\n\n        if (targetTouchUpInside != nil && targetTouchUpInside!.respondsToSelector(actionTouchUpInside!)) {\n            let touch: AnyObject! = touches.first\n            let touchLocation = touch.locationInNode(parent!)\n\n            if (CGRectContainsPoint(frame, touchLocation) ) {\n                UIApplication.sharedApplication().sendAction(actionTouchUpInside!, to: targetTouchUpInside, from: self, forEvent: nil)\n            }\n\n        }\n\n        if (targetTouchUp != nil && targetTouchUp!.respondsToSelector(actionTouchUp!)) {\n            UIApplication.sharedApplication().sendAction(actionTouchUp!, to: targetTouchUp, from: self, forEvent: nil)\n        }\n    }\n\n}"
    },
    {
      "type": "text",
      "data": "Below is a sample of the usage of the above code:"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let backTexture: SKTexture! = SKTexture(image:\"backBtn.png\")\nlet backTextureSelected: SKTexture! = SKTexture(image:\"backSelBtn.png\")  \nlet backBtn = FTButtonNode(normalTexture: backTexture, selectedTexture: backTextureSelected, disabledTexture: backTexture,size:backTexture.size())\nbackBtn.setButtonAction(self, triggerEvent: .TouchUpInside, action: #selector(GameScene.backBtnTap))\nbackBtn.position = CGPointMake(CGRectGetMidX(self.frame),CGRectGetMidY(self.frame))\nbackBtn.zPosition = 1\nbackBtn.name = \"backBtn\"\nself.addChild(backBtn)\n\nfunc backBtnTap() {\n    print(\"backBtnTap tapped\")\n    // Here for example you can do:\n    let transition = SKTransition.fadeWithDuration(0.5)\n    let nextScene = MenuScene(size: self.scene!.size)\n    nextScene.scaleMode = .ResizeFill\n    self.scene?.view?.presentScene(nextScene, transition: transition)\n}"
    }
  ]
}