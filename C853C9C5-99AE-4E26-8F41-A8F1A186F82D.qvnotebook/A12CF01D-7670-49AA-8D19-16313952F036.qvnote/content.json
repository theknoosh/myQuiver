{
  "title": "Tuples, lists, arrays, maps",
  "cells": [
    {
      "type": "text",
      "data": "<span style=\"color: rgb(36, 39, 41); font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 15px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">A&nbsp;</span><a href=\"https://msdn.microsoft.com/en-us/library/dd233200.aspx\" style=\"margin: 0px; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; color: rgb(0, 89, 153); text-decoration: none; cursor: pointer; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">tuple</a><span style=\"color: rgb(36, 39, 41); font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 15px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">&nbsp;is a grouping of unnamed, ordered values. Each value in a tuple does not need to be the same type, which means you can have a tuple defined like:</span>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let someTuple = (1, \"foo\", 42.3)"
    },
    {
      "type": "text",
      "data": "<p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">This would create a tuple containing an int, string, and float value.</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">A&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/dd233224.aspx\" style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline; color: rgb(0, 89, 153); text-decoration: none; cursor: pointer;\">list</a>&nbsp;is an ordered collection of values&nbsp;<em style=\"margin: 0px; padding: 0px; border: 0px; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;\">of the same type</em>&nbsp;which is immutable. This is probably the most common collection type used in functional programming, as it's completely immutable and has a lot of functionality for creating lists built on top of previously created lists, which allows you to make collections that \"grow\" (they're actually new collections, however, as the lists are immutable).</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">An&nbsp;<a href=\"https://msdn.microsoft.com/en-us/library/dd233214.aspx\" style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline; color: rgb(0, 89, 153); text-decoration: none; cursor: pointer;\">array</a>&nbsp;is a fixed size, mutable collection. They are very efficient to create, but must always be a single type.</p><blockquote style=\"margin-bottom: 10px; padding: 10px; border-width: 0px 0px 0px 2px; border-left-color: rgb(255, 235, 142); font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; quotes: none; background-color: rgb(255, 248, 220); color: rgb(36, 39, 41); orphans: 2; widows: 2;\"><p style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline; clear: both;\">Is it easy to convert between them when required?</p></blockquote><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">It's very easy to convert between lists and arrays. You can use&nbsp;<code style=\"padding: 1px 5px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 13px; line-height: inherit; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif; vertical-align: baseline; background-color: rgb(239, 240, 241); white-space: pre-wrap;\">List.ofArray</code>,&nbsp;<code style=\"padding: 1px 5px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 13px; line-height: inherit; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif; vertical-align: baseline; background-color: rgb(239, 240, 241); white-space: pre-wrap;\">List.toArray</code>,&nbsp;<code style=\"padding: 1px 5px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 13px; line-height: inherit; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif; vertical-align: baseline; background-color: rgb(239, 240, 241); white-space: pre-wrap;\">Array.ofList</code>, and&nbsp;<code style=\"padding: 1px 5px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 13px; line-height: inherit; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif; vertical-align: baseline; background-color: rgb(239, 240, 241); white-space: pre-wrap;\">Array.toList</code>&nbsp;to convert between the types.</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Converting from tuple to array or list is not common, and not always possible, as tuples allow multiple types to be stored within them.</p><blockquote style=\"margin-bottom: 10px; padding: 10px; border-width: 0px 0px 0px 2px; border-left-color: rgb(255, 235, 142); font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; quotes: none; background-color: rgb(255, 248, 220); color: rgb(36, 39, 41); orphans: 2; widows: 2;\"><p style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline; clear: both;\">They seem all similar in spirit, so what do actually I need to know that lets me understand when to use one versus another?</p></blockquote><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Lists and arrays are both used for collections. In general, you'll want to prefer lists if you're going to be making lists that \"grow\", as making a new list comprised of an element + the original list is much more efficent than doing the same thing with an array.</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Arrays are often used for higher performance scenarios (they have better memory locality, are more space efficient, etc), but are mutable and fixed size, so they're often not ideal when you're trying to work with constructing collections.</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; font-size: 15px; line-height: inherit; font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Tuples are typically used for completely different scenarios. The most common use case for tuples is to pass around multiple items as one value. This happens automatically when using framework methods that have&nbsp;<code style=\"padding: 1px 5px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: 13px; line-height: inherit; font-family: Consolas, Menlo, Monaco, 'Lucida Console', 'Liberation Mono', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', 'Courier New', monospace, sans-serif; vertical-align: baseline; background-color: rgb(239, 240, 241); white-space: pre-wrap;\">out</code>&nbsp;parameters, for example, so you'll see use cases like:</p>"
    },
    {
      "type": "code",
      "language": "swift",
      "data": "let (success, value) = int.TryParse(someString)"
    },
    {
      "type": "text",
      "data": "<span style=\"color: rgb(36, 39, 41); font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 15px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">In this case, the tuple is automatically created and then pattern matched to extract the values in a single line of code. Instead of thinking of a tuple as a \"collection\", it's more of a way to hold multiple values, often of different types, together.</span><div><span style=\"color: rgb(36, 39, 41); font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 15px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><br></span></div><div><span style=\"color: rgb(36, 39, 41); font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif; font-size: 15px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; line-height: inherit; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255);\"><b>About using collection types:</b></p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; line-height: inherit; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;\">Lists when</strong>: You need a dynamic collection that changes in size. List is a one directional linked list so keep in mind that every member of list requires 4 or 8 bytes of additional memory storing pointer to next list element.</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; line-height: inherit; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;\">Arrays when</strong>: You need to store large amount of primitive values, like ints, floats or bytes. Arrays represent a static block of memory reserved for the values, this is efficient when you have to store for example bytes of an image.</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; line-height: inherit; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255);\"><b>Additional useful collections:</b></p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; line-height: inherit; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;\">Sets when</strong>: You need to store, well a set. Set is a collection of unique values. Set has useful functions to calculate difference, union and intersection. For example you might have set of all people (A) and set of people who bought candy (B) so you can now calculate A - B = C, now you have set C which represents people who didn't buy candy.</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; line-height: inherit; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant-ligatures: inherit; font-variant-position: inherit; font-variant-caps: inherit; font-variant-numeric: inherit; font-variant-alternates: inherit; font-variant-east-asian: inherit; font-stretch: inherit; font-size: inherit; line-height: inherit; font-family: inherit; vertical-align: baseline;\">Maps when</strong>: You need a projection from one value to another. Now in previous example you calculated set C (people who didn't buy candy), you probably used some id to describe these people. Now you can project from this id to the person record using Map :).</p><p style=\"margin: 0px 0px 1em; padding: 0px; border: 0px; font-variant-ligatures: normal; font-variant-numeric: inherit; font-stretch: inherit; line-height: inherit; vertical-align: baseline; clear: both; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255);\">I hope this was useful.</p></span></div>"
    }
  ]
}